#BFS

graph = {
     0: [1, 3], 1: [0, 2, 3], 2: [4, 1, 5], 3: [4, 0, 1], 4: [2, 3, 5], 5: [4, 2], 6: []
  }

visited = [] 
queue = []     

def bfs_graph(visited, graph, node): 
  visited.append(node)
  queue.append(node)

  while queue:          
    n = queue.pop(0) 
    print (n, end = " ") 

    for neighbour in graph[n]:
      if neighbour not in visited:
        visited.append(neighbour)
        queue.append(neighbour)


print("Breadth First Search GRAPH is: ")
bfs_graph(visited, graph, 0)

Breadth First Search GRAPH is: 
0 1 3 2 4 5 
#DFS


graph = {
           0: [1, 3], 1: [0, 2, 3], 2: [4, 1, 5], 3: [4, 0, 1], 4: [2, 3, 5], 5: [4, 2], 6: []
         
           #'A': ['B','C','D'], 'B': ['E'], 'C': ['D','E'], 'D': [], 'E': []
       }

visited=set()

def dfs_graph(visited, graph, node): 
  if node not in visited:
    print(node, end=" ")
    visited.add(node)
    for neighbour in graph[node]:

      dfs_graph(visited, graph, neighbour)
print("Depth First Search GRAPH is: ")
dfs_graph(visited, graph, 0)
Depth First Search GRAPH is: 
0 1 2 4 3 5 
